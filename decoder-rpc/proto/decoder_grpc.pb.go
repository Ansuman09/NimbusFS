// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: decoder.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Decoder_Decode_FullMethodName = "/decoder.Decoder/Decode"
)

// DecoderClient is the client API for Decoder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DecoderClient interface {
	Decode(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*DecodeResponse, error)
}

type decoderClient struct {
	cc grpc.ClientConnInterface
}

func NewDecoderClient(cc grpc.ClientConnInterface) DecoderClient {
	return &decoderClient{cc}
}

func (c *decoderClient) Decode(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*DecodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DecodeResponse)
	err := c.cc.Invoke(ctx, Decoder_Decode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DecoderServer is the server API for Decoder service.
// All implementations must embed UnimplementedDecoderServer
// for forward compatibility.
type DecoderServer interface {
	Decode(context.Context, *FileRequest) (*DecodeResponse, error)
	mustEmbedUnimplementedDecoderServer()
}

// UnimplementedDecoderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDecoderServer struct{}

func (UnimplementedDecoderServer) Decode(context.Context, *FileRequest) (*DecodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decode not implemented")
}
func (UnimplementedDecoderServer) mustEmbedUnimplementedDecoderServer() {}
func (UnimplementedDecoderServer) testEmbeddedByValue()                 {}

// UnsafeDecoderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DecoderServer will
// result in compilation errors.
type UnsafeDecoderServer interface {
	mustEmbedUnimplementedDecoderServer()
}

func RegisterDecoderServer(s grpc.ServiceRegistrar, srv DecoderServer) {
	// If the following call pancis, it indicates UnimplementedDecoderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Decoder_ServiceDesc, srv)
}

func _Decoder_Decode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecoderServer).Decode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Decoder_Decode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecoderServer).Decode(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Decoder_ServiceDesc is the grpc.ServiceDesc for Decoder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Decoder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "decoder.Decoder",
	HandlerType: (*DecoderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Decode",
			Handler:    _Decoder_Decode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "decoder.proto",
}
